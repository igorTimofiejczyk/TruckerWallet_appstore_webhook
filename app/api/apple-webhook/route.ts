// app/api/apple-webhook/route.ts
import { NextRequest, NextResponse } from 'next/server';

export const runtime = 'edge';

const APPWRITE_FUNCTION_URL = process.env.APPWRITE_FUNCTION_URL!;
const APPWRITE_PROJECT_ID = process.env.APPWRITE_PROJECT_ID!;
const APPWRITE_API_KEY = process.env.APPWRITE_API_KEY!;

export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
    const rawBody = await request.text();

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–µ–±–∞–≥–∞
    console.log('üì• Incoming webhook request: ', request.method, request.url);
    console.log('üîπ Raw request body:', rawBody);

    // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ Appwrite Function
    const appwriteResponse = await fetch(`${APPWRITE_FUNCTION_URL}/executions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Appwrite-Project': APPWRITE_PROJECT_ID,
        'X-Appwrite-Key': APPWRITE_API_KEY,
      },
      // Appwrite –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –ø–æ–ª–µ `data`
      body: JSON.stringify({
        data: rawBody,  // –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        path: '/webhook', // –Ω—É–∂–Ω—ã–π endpoint –≤ —Ñ—É–Ω–∫—Ü–∏–∏
      }),
    });

    const responseText = await appwriteResponse.text();
    console.log('üì© Appwrite raw response:', responseText);

    return new NextResponse(responseText, {
      status: appwriteResponse.status,
      headers: { 'Content-Type': 'application/json' },
    });

  } catch (error: any) {
    console.error('‚ùå Vercel proxy error:', error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({
    status: 'ok',
    service: 'Apple Webhook Proxy',
    timestamp: new Date().toISOString(),
  });
}
